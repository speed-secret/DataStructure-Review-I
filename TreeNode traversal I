TreeNode traversal I（树搜索I）
Overview: this part has a very strong relationship with the recursion method
and we shall find the 
base case and 
recursive rule 
then we can delivery it;

Here below are three methods of traversal, and it could recursively search and put the current 
elements into the final result if applicable;
1. preOrder(recursion)
/**
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
public class Solution {
 public List<Integer> preOrder(TreeNode root) {
   //整体来说就是一个用一个helperfunction 和Linkedlist；然后在这里面不断按照特定顺序打印
   List<Integer> result = new ArrayList<>();
   helper(result, root);
   return result;
 }
 
 private void helper(List<Integer> result, TreeNode root){
   if (root == null) {
     return;
   }
   result.add(root.key);
   helper(result, root.left);
   helper(result, root.right);
 }
}
 
In order Traveral(Recursion)

public class Solution {
 public List<Integer> inOrder(TreeNode root) {
   List<Integer> result = new ArrayList<>();
   helper(root, result);
   return result;
 }
 
 private void helper(TreeNode root, List<Integer> result) {
   if (root == null) {
     return;
     }
   helper(root.left, result);
   result.add(root.key);
   helper(root.right, result);
 }
}

Post order Traveral(Recursion)
public class Solution {
 public List<Integer> inOrder(TreeNode root) {
   List<Integer> result = new ArrayList<>();
   helper(root, result);
   return result;
 }
 
 private void helper(TreeNode root, List<Integer> result) {
   if (root == null) {
     return;
     }
   helper(root.left, result);
   helper(root.right, result);
   result.add(root.key);
 }
}

Height of Binary Tree
//High level:
//check left side height and right side height and return the maximum of its height + 1 as current height
//Similarly, we can use this helper funtion to determine if we need to return false once we find subtree is unbalanced.
/**
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
public class Solution {
 public int findHeight(TreeNode root) {
   if(root == null) {
     return 0;
   }
   return Math.max(findHeight(root.left), findHeight(root.right)) + 1;
 }
}
 
*/
 
Check if a binary Tree is balanced or not:
/**
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
public class Solution {
 public boolean isBalanced(TreeNode root) {
   /*
   //哎呀哎呀你的左子数是什么啊，，右子数又是什么呀；
   if (root == null) {
     return true;
   }
   //只要这里不返回一个-1；那么我可以认为这里都是符合条件的
   return getHeight(root) != -1;
 }
 
 private int getHeight(TreeNode root) {
   if (root == null){
     return 0;
   }
   int leftHeight = getHeight(root.left);
   if (leftHeight == -1){
     return -1;
   }
   int rightHeight = getHeight(root.right);
   if (rightHeight == -1){
     return -1;
   }
   if (Math.abs(leftHeight - rightHeight) > 1){
     return -1;
   }
   return Math.max(leftHeight, rightHeight) + 1;
 }
 */

//High level:
//check each subtree is symmetric or not;
//so what is symmetric?
//the left subNode1 is equals to the right subNode2;
//&& the right subNode1 is equals to the right subNode1;
Symmetric Binary Tree
/**
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
public class Solution {
 public boolean isSymmetric(TreeNode root) {
   if (root == null) {
     return true;
   }
   return isSymmetric(root.left, root.right);//overload
 }
 
 private boolean isSymmetric(TreeNode one, TreeNode two) {
   if (one == null && two == null) {
     return true;
   }
   else if (one == null || two == null) { //常容易和 one != null || two != null 混淆；
                                         //其实带一个test case进去就可以了！
     return false;
   } else if (one.key != two.key){
     return false;
   }
   return isSymmetric(one.left, two.right) &&
          isSymmetric(one.right, two.left);
 }
}
 
/*
public class solution {
   public boolean isSymmetric(TreeNode root) {
     if (root == null){
       return true;
     }
     return isSymmetric(root.left, root.right);
   }
 
   private boolean isSymmetric(TreeNode one, TreeNode two) {
     if (one == null && two == null){  //one two 必须同时等于null才能返回真
       return true;
     }
     else if (one == null || two == null){ //默认已经排除两个同时是null了
       return false;
     } else if (one.key != two.key) { //在此情况下，如果两者的值并不相同，那么就返回假
       return false;
     }
     return isSymmetric(one.left, two.right) &&
            isSymmetric(one.right, two.left);
   }
}
*/

//High level
//It is similar to the symmetric but tweaked Identical has another possiblity
//that is either the two subtree is completely same
//or they can be fliped to the same
//*****Very Important!*******
//To make it simple, it is the case we need to add a scenario that they were symmetric of completely equals

Tweaked Identical 
/**
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
 
 
public class Solution {
 public boolean isTweakedIdentical(TreeNode one, TreeNode two) {
   if (one == null && two == null) {
     return true;
   }
   if (one == null || two == null) {
     return false;
   }
   if (one.key != two.key) {
     return false;
   }
   return isTweakedIdentical(one.left, two.left) &&
   isTweakedIdentical(one.right, two.right) ||
          isTweakedIdentical(one.right, two.left) &&
          isTweakedIdentical(one.left, two.right);
 }
}
 
/*
public class solution {
 public boolean isTweakedIdentical(TreeNode one, TreeNode two) {
   if (one == null && two == null) {
     return true;
   }
   else if (one == null || two == null){
     return false;
   } else if (one.key != two.key) {
     return false;
   }
   return isTweakedIdentical(one.left, two.right) &&
   isTweakedIdentical(one.right, two.left) ||
   isTweakedIdentical(one.right, two.left) &&
   isTweakedIdentical(one.left, two.right);
 }
}
*/

//High level:
//check all the nodes in this binary tree and find out if they are qualified for BST requirement; 
Is binary search Tree or not
 /**
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
public class Solution {
 public boolean isBST(TreeNode root) {
   //首先还是分析，如何定义binary这个概念；
   return isBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
 }
 
 private boolean isBST(TreeNode root, int min, int max) {
   if (root == null) {
     return true;
   }
   if (root.key < min || root.key > max) {
     return false;
   }
   return isBST(root.left, min, root.key - 1) &&
          isBST(root.right, root.key + 1, max);
 } //T: O(n);
}   //S: O(height);
 
Get keys in Binary Search Tree in a given range
//***************
//High level:
//use recursion and if current node is a qualified node in the range
//base case: 
if (root == null) {
  return;
}
//divide deeper to the left until touch the base case
//add the current element into the result;
//divide deeper to the right until touch the base case
//***************
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
public class Solution {
 public List<Integer> getRange(TreeNode root, int min, int max) {
   //苦于没有能够深刻的理解recursion的骚操作；
   //如果只是做一个简单的root == root.left/right 的操作的话语，那就无法往上返回了
   List<Integer> result = new ArrayList<>();
   getRange(root, min, max, result);
   return result;
 }
  private void getRange(TreeNode root, int min, int max, List<Integer> result){
   //base case
   if(root == null){
     return;
   }
   if(root.key > min){
     getRange(root.left, min, max, result);
   }
   if(root.key >= min && root.key <= max){
     result.add(root.key);
   }
   if(root.key < max){
     getRange(root.right, min, max, result);
   }
 }
}


//***************
High level:
find elements in BST by go to the right direction
and connect the returned elements back to the root;
//***************
Search in BST
/**
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
public class Solution {
 public TreeNode search(TreeNode root, int key) {
   if(root == null){
     return null;
   }
   if(root.key < key){
     return search(root.right, key);
   } else if(root.key > key){
     return search(root.left, key);
   } else {
     return root;
   }
 }
}
 
Insert in BST
/**
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
public class Solution {
 public TreeNode insert(TreeNode root, int key) {
   if(root == null){
     return new TreeNode(key);
   }
   if (root.key < key){
     root.right = insert(root.right, key);
   } else if(root.key > key){
     root.left = insert(root.left, key);
   }
     return root;
 }
}
 
Delete in BST
/**
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
public class Solution {
 public TreeNode deleteTree(TreeNode root, int key) {
   // I am here to improve the past rate!
   if(root == null){
     return null;
   }
   //find the node first
   if(root.key < key){
     root.right = deleteTree(root.right, key);
     return root;
   } else if(root.key > key){
     root.left = deleteTree(root.left, key);
     return root;
   }
 
   //case 1, 2
   if(root.left == null){
     return root.right;
   } else if(root.right == null){//case 3
     return root.left;
   }
 
   //case 4(garantunee the both children are not null)
   //case 4.1
   if (root.right.left == null) {
     root.right.left = root.left;
     return root.right;
   }
 
   //case 4.2 find the smallest in the largest subtree
   TreeNode smallest = deleteSmallest(root.right);
   smallest.left = root.left;
   smallest.right = root.right;
   return smallest;
 }
 
 private TreeNode deleteSmallest(TreeNode cur){
   TreeNode prev = cur;
   cur = cur.left;
   while(cur.left != null){
     prev = cur;
     cur = cur.left;
   }
   prev.left = prev.left.right;
   return cur;
 }
}
 

Pre Order
/**
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
public class Solution {
 public List<Integer> preOrder(TreeNode root) {
   // Write your solution here
 }
}
 
In Order
/**
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
public class Solution {
 public List<Integer> inOrder(TreeNode root) {
  List<Integer> result = new ArrayList<>();
  Deque<TreeNode> stack = new ArrayDeque<>();
  TreeNode cur = root;
  while(!stack.isEmpty()||cur != null){
    if(cur != null){
      stack.offerFirst(cur);
      cur = cur.left;
    } else {
      cur = stack.pollFirst();
      result.add(cur.key);
      cur = cur.right;
    }
  }
  return result;
 }
}
 
 
Post Order
/**
* public class TreeNode {
*   public int key;
*   public TreeNode left;
*   public TreeNode right;
*   public TreeNode(int key) {
*     this.key = key;
*   }
* }
*/
public class Solution {
 public List<Integer> postOrder(TreeNode root) {
   List<Integer> result = new ArrayList<>();
   if(root == null){
     return result;
   }
   //initialize a stack for store purpose
   Deque<TreeNode> stack = new ArrayDeque<>();
   stack.offerFirst(root);
   TreeNode prev = null;
   while(!stack.isEmpty()){
     TreeNode cur = stack.peekFirst();
     //三种情况，从上向下，从左下向上，从右下向上；
     if(prev == null || prev.left == cur || prev.right == cur){
       if(cur.left != null){
         stack.offerFirst(cur.left);
         //因为这里之后要往下钻了；
       } else if(cur.right != null){
         stack.offerFirst(cur.right);
       } else {
         cur = stack.pollFirst();
         result.add(cur.key);
       }
       //这里写一个简单的可以被poll出来的一个条件；
     }
     /*
     else if(cur.right == prev || cur.left == prev && cur.right == null){
       cur = stack.pollFirst();
       result.add(cur.key);
     } else{
       stack.offerFirst(cur.right);
     }
     */
      else if (cur.left == prev && cur.right != null) {
               stack.offerFirst(cur.right);
           } else {
               cur = stack.pollFirst();
               result.add(cur.key);
           }
     prev = cur;
   }
   return result;
 }
}
   /*
   List<Integer> result = new ArrayList<>();
   Deque<TreeNode> stack = new ArrayDeque<>();
   if (root == null) {
     return result;
   }
   stack.offer(root);
   TreeNode prev = null;
   while (!stack.isEmpty()) {
     TreeNode cur = stack.peekFirst();
     if (prev == null || prev.left == cur || prev.right == cur) {
       //if we can go down from up then we have to dive into left first
       if (cur.left != null) {
         stack.offerFirst(cur.left);
       } else if (cur.right != null) {
         stack.offerFirst(cur.right);
       } else {
         stack.pollFirst();
         result.add(cur.key);
       }
       //if we go up from the bottom:
       //we go up from the left side and no longer get access to right;
       //we go up from the right side and the right side no longer have the value;
     } else if (prev == cur.right || prev == cur.left && cur.right == null){
       stack.pollFirst();
       result.add(cur.key);
     } else {
       //if we go up from the left side and we have something exist in the right tree;
       stack.offerFirst(cur.right);
     }
     prev = cur;
   }
   return result;
 }
}
 
*/
/*
public List<Integer> postOrder(TreeNode root) {
 List<Integer> result = new ArrayList<>();
 if(root == null){
   return;
 }
 Deque<TreeNode> stack = new ArrayDeque<>();
 TreeNode cur = root;
 stack.offerFirst(cur);
 while(!stack.isEmpty()){
   TreeNode cur = stack.peekFirst();
   if(prev == null || cur == prev.left || cur == prev.right){
     if(cur.left != null){
       stack.offerFirst(cur.left);
     } else if(cur.right != null){
       stack.offerFirst(cur.right);
     } else {
       stack.pollFirst();
       result.add(cur.key);
     }
   } else if(prev == cur.right || prev == cur.left && cur.right == null){
     stack.pollFirst();
     result.add(cur.key);
   } else {
     stack.offerFirst(cur.right);
   }
   prev = cur;
 }
 return result;
}
