Binary Search is all about saving time and improving searching efficency, 
the core logic of conducting binary search is to find out if those
two conditions keep truth:
1. It prunes half of its size
2. When it was executed, it won't rule out the correct solution.

Here are few coding question we can discuss:
1.Classical Binary Search
Given a target integer T and an integer array A sorted in ascending order, find the index i such that A[i] == T or return -1 if there is no such index.

Assumptions

There can be duplicate elements in the array, and you can return any of the indices i such that A[i] == T.
Examples

A = {1, 2, 3, 4, 5}, T = 3, return 2
A = {1, 2, 3, 4, 5}, T = 6, return -1
A = {1, 2, 2, 2, 3, 4}, T = 2, return 1 or 2 or 3
Corner Cases

What if A is null or A is of zero length? We should return -1 in this case.

Solution1:
public class Solution {
  public int binarySearch(int[] array, int target) {
  //clarify: if the duplicated elements that do exist, return either one of them
  //check the corner case first;
  //assume this is a sorted array;
  //we can use binary search;
  //T: O(logn);
  //S: O(1);
    if (array == null || array.length == 0) {
      return -1;
    }
    //initialization:
    int left = 0;
    int right = array.length - 1;
    //classical Binary Search:
    while (left <= right) { //一定是这种<=的情况，如果只是小于，那么2个数的怎么办？
                            //和面试官讨论去clarify是否可以允许随便返回一个数。
      int mid = left + (right - left) / 2;
      if (array[mid] == target) {
          return mid;
      } else if (array[mid] < target) {
          left = mid + 1;
      } else {
          right = mid - 1;
      }
    } 
    return -1;
  }
}

Solution2:
//besides of checking corner case stuff
//we can use another structure to detect the correct answer
//I called it as a way of doing binary search
//just remain a length of two after the while loop
//and do more a post processing check later
public class Solution2 {
  public int binarySearch(int[] array, int target) {
    if (array == null || array.length == 0) {
      return -1;
    }
    //initialization:
    int left = 0;
    int right = array.length - 1;
    //classical Binary Search:
    while (left < right - 1) { 
      int mid = left + (right - left) / 2;
      if (array[mid] == target) {
          return mid;
      } else if (array[mid] < target) {
          left = mid + 1;
      } else {
          right = mid - 1;
      }
    }
    //we still has two left here and we have reached the end yet
    //so we do a post-processing here
    if (array[left] == target) {
        return left;
    } else if (array[right] == target) {
        return right;
    } 
    //since we can't locate the correct index
    //so we need to return a special number;
    else {
        return -1;
    }
  }
}
